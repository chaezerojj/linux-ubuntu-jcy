1. Telnet
2. SSH **
- port 22
- RSA 보안 방식(공개키 / 비밀키)
- mobaXterm / Putty를 사용해서 간편하게 접속할 수 있음
3. FTP
- 상태코드가 http랑 다르다
- port 21
4. ufw
- 인바운드
- 아웃바운드
- 기본전략: 방화벽을 켜면 모두 접속 금지


프로토콜 = 약속
http에서 상태코드를 200 리턴 -> 성공
ftp에서 상태코드를 100 리턴 -> 성공

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<프로세스>
- : 실행중인 프로그램
- *특징
- 프로세스는 부모-자식 관계를 가지고 있음
- 만약 부모-자식 관계가 없다면 고아 프로세스(Orphan Process)라고 함
- ex. 부모가 자식 프로세스를 생성
- 프로세스 번호(PID)

- 데몬 프로세스, 고아 프로세스, 좀비 프로세스
- 데몬 프로세스 : 계속 돌아가는 프로세스
- 고아 프로세스 : 부모 프로세스가 없는 프로세스
- 좀비 프로세스 : 자식 프로세스가 종료되었는데 계속 남아서 리소스 잡아먹는 나쁜 프로세스

- ls 명령어 실행시
-   부모: /bin/bash
-   자식: ls

- ps -ef -> 현재 실행 중인 프로세스 보는 명령어
- UID/PID/PPID/C/STIME/TTY/TIME/CMD
- UID: 프로세스 실행한 사용자 ID
- PID: 프로세스 ID
- PPID: 부모 프로세스 ID
- C: CPU 사용량 (%)
- STIME: 프로세스 시작 일시
- TTY: 프로세스가 실행된 터미널의 종류
- TIME: 프로세스 실행 시간
- CMD: 실행되고 있는 프로그램 이름(명령어)

systemctl start vsftpd 명령어 실행
=> /usr/sbin/vsftpd 해당 명령어 실행했다
systemctl start vsftpd
=> vsftpd 프로세스 종료
=> /usr/sbin/vsftpd 해당 명령어 실행한다

- kill -9 <PID> => 프로세스 기본 종료 명령어

ps -ef | grep apache2
sudo kill -9 <PID>

systemctl status apache2
systemctl stop apache2
-> code exited 로 뜨면 종료된거

ps -ef | grep apache2 다시 입력하면 안뜸

/usr/sbin/apache2
-> Error 

pgrep apache2 -> 현재 실행중인 프로세스 PID만 보기

kill -9 $(pgrep <프로세스 이름>) -> 프로세스 종료 명령어

프로세스 - 포그라운드 / 백그라운드
포그라운드 -> 앞에서 작업하는 프로세스
백그라운드 -> 뒤에서 작업하는 프로세스
sleep 100 -> 100초동안 잠시 쉬기
sleep 5 & -> 백그라운드에서 5초 쉬기

sleep 50 &
ps -ef | grep sleep

jobs -> 백그라운드 실행중인 작업 보기

sleep 100 &
ps -ef | grep sleep
kill -9 <sleep 번호>

만약 ubuntu 유저가 sleep 1000 & 명령 실행
ubuntu 유저가 로그아웃함
-> sleep 1000 & 은 실행 X, 로그아웃하면 종료됨

만약 sleep 100 & 가 계속 실행되길 바라면,
nohup 명령어 입력 (no hang up) -> 로그아웃 후에도 계속 실행됨

nohup sleep 1000 1 > system.log 2 > error.log &

at -> 정해진 시간에 실행하도록 예약하는 명령어
at 07:00 am -> 아침 7시에 명령 실행

timedatectl list-timezones
timedatectl list-timezones | grep Seoul
sudo timedatectl set-timezones Asia/Seoul
-> 서울 시간으로 설정

at 08:23 pm
at> ls 입력하고 ctrl+d 누르기

atq/at -l -> 등록된 예약 목록 보기
atrm -> 등록된 예약 삭제하기
- ex. atrm 1 -> 1번 예약 삭제하기

at -l -> 예약 리스트 확안
atrm 2 (2번예약 삭제)

at / crontab 의 차이
- at : 한번만 실행
- crontab : 반복 실행

crontab -e
> 1 입력

crontab 
-> ***** <명령어> --> 매 분마다 실행
30 **** <명령어> --> 매 시간 30분마다 명령어 실행
분/시/일/월/요일 <명령어> 순서
0 12 ** 1 <명령어>
-> 매주 월요일 오후 12시에 명령어 실행

Continuous Integration(지속적 통합)
Continuous Delivery(지속적 배포)

1.0.0 버전으로 웹사이트를 출시함
출시 후 버그가 생겨 1.0.1 버전으로 소스코드 수정 후 빌드해서 재배포
>> 1. 소스코드 수정
   2. 소스코드 빌드하여 빌드파일 생성
   3. 서버에 빌드파일 업로드
   4. 빌드파일을 서버에서 재실행
   해당 부분을 자동화하는 것을 CI/CD 
   젠킨스, 깃허브 액션 등 -> 소스코드 수정해서 올리는 순간 다른 곳에 push해서 자동 업로드까지 완료
   
쉘 프롬프트(명령창) / 쉘 스크립트(파일)

apache2-deploy.sh이라는 파일 만들어서
1. apt install apache2
2. /var/html에 html파일 옮기기
3. 방화벽 설정하기 
apache2-deploy.sh파일만 실행하면
1,2,3 명령을 자동으롤 실행하는 파일로 만든다.


환경변수

변수? 값을 담는 그릇
환경변수 -> 전역변수

지역변수/전역변수
= 국소적인 지역에서만 사용가능한 변수
= 메소드 클래스든 사용할 수 있는 변수

window 환경변수
사용자변수 : 해당 사용자만 사용하는 변수
시스템변수 : 모든 사용자가 사용할 수 있는 변수

linux
쉘 변수: 로그인쉘 등 쉘 내에서만 사용하는 변수
환경 변수: 모든 쉘에서 사용가능한 변수

set/env
set: 쉘 변수와 환경변수 둘 다 출력
env: 환경 변수만 출력

set | less
env | less

*환경변수 지정하는 방법
1. 쉘 변수를 선언한다
<변수명>=<변수값>
SOME=test
2. 쉘 변수를 환경변수로 선언한다
export <쉘변수명>
export <쉘변수명>=<변수값>

*변수 삭제 방법
unset <변수명>

echo $SOME
export SOME
env | grep SOME (확인)

unset SOME

전역변수를 쓰는 이유
-> 다른 파일에도 똑같은 값을 할당하기 위해서
배포스크립트를 짤 때, 전역변수를 사용해서 PID, Git주소, 프로젝트명, 빌드파일 경로 등..

--------------------------------------------

그동안 배운것들

1. 기본 명령어 (cd, ls ~~)
2. 텍스트에디터(vi, nano)
3. 패키지 매니저 (apt)
4. 권한 관리 (파일권한/소유자)
5. 프로세스 (ps/kill/백&포그라운드)
6. 기본 네트워크 (ufw)
7. 파이프라인 (grep) & 입출력 (1 > 2 >)
8. 환경변수 (set/env/export)
9. 유저 관리 (useradd/passwd/usermod)


만약, 첫 서버 구축 시
1. 리눅스 세팅 - 2. 네트워크 세팅 - 3. 서버에 프로젝트실행 위한 패키지 설치 및 세팅 - 4. 프로젝트 빌드파일 실행 (프로세스) - 5. CI/CD 구축 - 6. nginx를 통한 블루그린배포
>> 다 하기 힘들면 script 파일에 써서 리눅스로 실행시킴

alias -> 명령어 단축어로 별명만들어서 실행해줌
alias <별명>=<'명령어'>;<'명령어'>

별명 삭제 -> unalias <별명>

history -> 이전에 입력한 명령어 출력
! -> 바로 이전 수행한 명령어 재실행
!<숫자> -> history에서 해당 명령어 실행

로그인쉘: 
본쉘: 최초의 쉘. 실행처리속도 가장 빠름. 사용자 편의성 최악
C쉘: 본쉘 + 사용자 편의성 추가
콘쉘: C쉘 기능 그대로 + 처리 속도 상승
배쉬셀: 리눅스에서 기본적으로 제공하는 쉘. 리눅스 쉘이라고도 불림
대시쉘: 우분투 6버전부터 사용되는 쉘

    chsh: 기본쉘 바꾸기(로그인쉘 바꾸기)
    chsh -s/bin/sh 