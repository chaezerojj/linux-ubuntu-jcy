패키지 매니저

*데비안 패키지의 특징
- .deb
- 레드햇 패키지 매니저는 RPM

우분투 패키지의 특징
- 바이너리 파일로 구성되어 있음
- 패키지 삭제 시 일괄 삭제할 수 있음
- 삭제하지 않고 업그레이드 가능
- 의존 패키지가 무엇인지 알려줌

apt 매니저

>apt 입력
>apt list 입력 (리스트 다나옴)
>apt search vsftpd 입력 

리눅스에서 프로그램 설치를 하려면..
1. 리파지토리(설치파일 저장소, repository)와 연결
2. 리파지토리에서 가지고 있는 설치 파일 리스트를 받아와야 됨.
3. 설치파일 다운로드 
4. 설치파일 실행
5. 설치 완료

apt-cache : 패키지 데이터베이스 관련 명령어
apt-get : 패키지 매니징 관련 명령어
apt-search쓰면 되는데 apt-cache search 써야되는 이유??

apt interative 한 명령어

apt list == apt-cache pkgnames
-> 리파지토리의 리스트출력
apt-search == apt-cache search
apt-cache show vsftpd <- 상세정보보기

apt-cache showpkg <- 패키지 의존성 검사
apt-cache showpkg vsftpd

리녹스 패키지 매니저는 기본적으로
다운로드-설치를 자동으로 한다.
또한, 의존성 관리도 자동으로 함

apt-get update <- 설치할 수 있는 메뉴판 업데이트
                    <- 다운로드 하는 애들은 다 apt-get 명령어 사용
apt-cache update? 없음!

sudo apt-get install netcat

apt list --installed | grep netcat 

apt-cache list <- 패키지 리스트 출력(메뉴판)
apt-cache search <- 원하는 패키지 검색
apt-cache show <- 패키지 상세정보 보여주기
apt-get update <- 패키지 리스트 업데이트
apt-get install <- 패키지 설치
apt-get remove <- 패키지 삭제


**apt-get install에 대해
--no-upgrade <- 설치할 때 업데이트 안 한 버전으로 설치
apt-get install --only-upgrade <- 설치 안하고 업데이트만 할 때 사용
apt-get remove --purge <- 설정 파일도 같이 삭제
apt-get clean <- 디스크 공간 정리

캐시 (캐싱)
CPU - 메모리 - 하드디스크
> 용량크기 순: 하드>메모리>CPU
> 연산속도: CPU
컴퓨터 속도를 위해서 캐시를 사용
캐시 메모리란, 하드디스크에 있는 파일을 메모리에 잠깐 저장

캐싱은 상대적
CPU - 메모리 - 하드디스크 - 인터넷

apt-get download <- 다운로드만 함(설치 X)

------------------------
데비안 레드햇
<<<dpkg>>>
**데비안의 패키지 관리 명령
- 인터넷과 관련 없음
- 설치파일로 설치하는 행위
- 다운로드 기능 X
- 
인터넷에 올라온 것들은 다 최신버전
인터넷에 올라오지 않은 패키지도 존재
설치 파일을 따로 다운받아서 dkpg로 설치해야 함!

apt 명령어는 의존성 관리 자동으로 해줌
(롤 설치할때 구글 크롬도 같이 설치되듯)
dpkg 명령어는 의존성 관리 X
(롤 설치할때 구글 크롬 설치 안됨)
solution >> 롤 설치하기 전에 구글 크롬을 먼저 설치해야 설치가 가능함.

dpkg -r netcat
패키지란? 프로그램을 실행하기 위해 필요한 파일들

dev 아카이브
tar 파일 == tape archive
- 예전에는 파일들을 마그네틱 테이프에 저장했음
- 압축파일과 아카이브의 차이점
>> 압축은 파일 용량을 줄여주고,
    아카이브는 파일 용량 그대로임 (원본 파일)

압축의 원리 > 010101010101
                  asdfjasdfasdfasdfasdf
                  asdf = 1 로 별칭을 줘서
                  1j1111 >이렇게 줄임
                  이걸 다시 압축 풀기함

dpkg -x netcat_1.10-~~~.deb <폴더명>
아카이브 파일 풀기


netcat_1.206-1ubuntu1_all.deb
파일명_버전-리버전_아키텍처.deb
리버전 : 소스 파일(코드)은 변경 없음.
           의존성이나 보안 등이 변경됨.
아키텍처 : 시스템 아키텍처
             적용되는 컴퓨터 사양
             all : 다 쓸 수 있음
             i286 : 인텔계열에서만 쓸 수 있음.

설치순서
1. 메뉴판 불러오기 (update)
2. 다운로드
3. 설치
4. 실행

focal? > OS 버전(ex. Window10,11,X)이
          Ubuntu20 LTS -> 별명으로 부름
20버전을 -> focal 이라고 부름


deb: 패키지 유형
http://kr.archive.ubuntu.com/ubuntu/ : 저장소 주소
focal : 버전 정보
main restricted : 소프트웨어 카테고리
저장소가 미국이라 다운로드 받으면 거리상 다운속도 느림.
한국에서 만든 미러 서버가 미국 저장소에 있는 패키지들을 옮겨놓음.
> 한국 리눅스 사용자들은 한국 미러서버에서 패키지 다운로드 ㄱㄱ

한국 미러서버가 세팅되어있지 않았을 수도 있기 때문에
리파지토리 연결 주소 확인해야 함.
>>/etc/apt/sources.list 파일에서 확인 가능

예를 들어,
스프링부트로 프로젝트를 생성하여 배포할 예정,
서버에 해당 프로젝트를 실행할 수 있는 환경 구축해야 함
>jdk 설치해야 프로젝트 실행 가능
과정 >>
1. apt-get update <- 리스트 업데이트
2. apt-get install jdk10 <- jdk10 패키지 설치
3. 프로젝트 빌드파일을 서버로 옮기기
4. 빌드파일 실행

apt 명령어랑 비슷한 애들 소개
aptitude <- 거의 apt랑 유사한 
           <- GUI 환경에서도 사용 가능
           <- CLI 환경보다는 GUI 환경에 최적화되어 있음

apt-get install -y 
-> 중간에 동의합니까? 생략 옵션
왜??
>>
쉘 스크립트 : 파일에다 명령어들을 적어놓고 파일 실행하면 한번에 실행됨
1. jdk 설치 -> 동의하시겠습니까? 생략해야 함
2. 프로젝트 파일 빌드
3. 빌드 파일 실행
& 귀찮아서..

openjdk 11 버전설치하는데 설치로그를
jdk-install.log에 남겨보세요.


우분투에만 있는 스냅!
프로젝트 파일을 배포하는데 
jdk netcat javascrip nmp 등이 필요한데,
서버 컴퓨터가 100대임 (귀찮음)
그래서 컨테이너를 만듦
>>
------컨테이너-----------ㄱ
jdk netcat javascript nmp ㅣ
---------------------------

스냅도 필요한 애들 다 모아놓고
한개만 설치

★★★★★★★★
apt-get install update
apt-cache list search show 
apt install update lish search
apt list --installed | grep <패키지명>
★★★★★★★★★

download ~~
install~~ 
~~~ 이렇게 뜨다가 
error! 뜨면
>>
if ((apt list --installed | grep jdk) == null) {
    apt-get install jdk 
     echo "JDK 설치 완료"
} else {
  echo"이미 jdk가 설치되어있습니다."
}

으로 실행



1. 기본 명령어
cd mkdir touch echo rm tail find grep less more ls 
mv cp chown chmod su sudo vi
2. 패키지 관리
apt-cache 
apt-get 
apt

