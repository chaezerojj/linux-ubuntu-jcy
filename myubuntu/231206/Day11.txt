! 지난 시간 복습

프로세스
- ps : 현재 프로세스 보기
- ps -ef : 전체 프로세스 보기
- 프로세스 끄기 -> kill -9 <PID>
- 프로세스 ID = PID 
- pgrep <프로세스명> : 원하는 프로세스 PID 출력
- 프로세스 2가지 종류: 포그라운드 / 백그라운드
- 포그라운드 > 앞에서 실행되는
- 백그라운드 > 뒤에서 실행되는
- <명령어> & : 백그라운드 실행
- jobs : 실행시킨 백그라운드 프로세스 보기
- nohup : 로그아웃해도 작업 계속 실행
- at : 예약 실행
- crontab: 예약 실행(반복 실행)

리눅스에서의 변수 2가지
- 쉘 변수
- 환경변수

- set : 쉘 변수와 환경변수 둘 다 출력
- env : 환경변수만 출력
- <변수명>=<변수값> : 쉘 변수 선언
- export <쉘변수명> : 쉘 변수를 환경변수로 지정
- unset <변수명> : 변수 삭제

--------------------------------------------------

231206

! 리눅스 파일 시스템 

? 파일 : 데이터, 프로그램을 담는 그릇
? 파일 시스템 : 파일들을 관리하는 시스템

? 데이터 : 파일 원본 그 자체
- ex. html 파일을 생성
  > header = 메타데이터 
    헤더부분은 검색할 때 검색어로 사용됨.
? 메타데이터 : 데이터가 어떤 것인지 설명하는 것.

? 파일 시스템 데이터 참조방식
1. 연속 할당 방식
2. 연결 할당 방식
3. 색인 방식

? 리눅스 파일의 메타데이터 
- ls -l
- 파일 권한, 소유자, 링크 개수, 마지막 수정일, 확장자 등을 메타데이터로 가지고 있음

? 리눅스 파일 시스템 
- 1. ext2
> : 초기 리눅스 파일 시스템
> 슈퍼블록이라는 개념이 도입되어, 슈퍼블록에 메타데이터 정보와 데이터와의 연결관계를 가지고 있음
> 슈퍼블록을 백업하는 시스템이 존재함
> inode 개념이 도입됨

- 2. ext3
> : 검색 기능이 더 발전됨
> ex. db데이터가 100개 존재할 때 52번 데이터를 찾으려고 한다면, -> 1,2,3,... , 52
      만약 9952번 데이터를 찾으려면, 
      1~5000 / 5001~10000
             5001~ 7500 / 7501~10000 
             > 인덱싱하여 데이터를 찾음
> ? B-tree
- ()2000()7000()
               l
        ()8000()9000()
> ? H-tree 
> ext3부터 H-tree 방식 도입
  - 저널링 기능 지원
    ex. 파일 옮기던 중 전원 off
        저널링 기능 사용 시, log를 남김
        재부팅할 때 log파일을 검사하여 충돌 발생 지점부터 재시작 가능
- 3. ext4
> : 대용량 파일 지원
 - 파일 하나의 최대 크기 ext3 2TB -> ext4 16TB
 - 하나의 파티션 최대 크기 ext3 16TB -> 1EB
> 사전할당 기능 지원
 - = 데이터 옮기기 전, 미리 공간을 확보하고 데이터를 옮김
 - 기존에는 디스크 공간 할당 시, 데이터를 옮기면서 디스크 위치를 함께 할당

? 마운트
- DB 서버 운용 & 100GB짜리 하드디스크 사용 중임, 데이터가 10000건 담을 수 있음 - 하드디스크

- msdos : ms-dos 파티션에 사용됨
- iso9660 : 
- nfs

-----------------------
가상디스크 20gb 만들고
우분투 파티션 마운트해보기!!


uuid
21690432-c381-4037-907f-8c47289932ba