빈 파일생성 : touch
폴더 생성 : mkdir
폴더 삭제 : rmdir
파일복사 붙여넣기 : cp
파일 이동 or 이름 바꾸기 : mv
파일 내용 출력 : cat, more, less, tail
파일 삭제 : rm
현재 디렉터리 절대경로 출력 : pwd
현재 디렉터리에 있는 파일 보기 : ls
디렉터리 이동 : cp
하드링크 만들기 : ln
심볼릭링크 만들기 : ln -s
파일 찾기 : find (-exec : 찾아서 명령어 실행)
문자열 찾기 : grep


==================================
231113

디렉터리 이동 : cd
현재 디렉터리 출력 : pwd
현재 디렉터리 파일 목록 출력 : ls
** ls 옵션들
ls -F : 파일 종류 구분 표시
@ : 심벌릭 링크 / 디렉터리
- 표시 없으면 일반 파일
ls -a : 숨김파일까지 출력
ls -l : 파일 리스트 상세 보기 출력
rw-rw-r-- : 권한  ubuntu(권한 옆에 잇는거1) : 파일 소유자  ubuntu(권한 옆에 잇는거2) : 그룹 
권한앞에 -d : 파일 종류
d 디렉터리 - 일반 파일
l 심벌릭 링크 

폴더 생성 : mkdir
mkdir -p : 중간단계 디렉터리 자동 생성
mkdir /dev/ssd/user1
ssd가 없을 경우 자동 생성

폴더만 삭제 : rmdir 
rmdir -p : 하위폴더 삭제시 부모 폴더가 빈 폴더가 될 경우 같이 삭제
rmdir -p /dev/ssd/user1
user1 폴더 삭제 후 ssd가 빈폴더가 되면 자동 삭제

** mkdir은 디렉터리가 비어있지 않으면 삭제 불가 **

---------------------------------

텍스트 파일 내용 출력 : cat, more, less
                밑에서 부터 출력하는 명령어 : tail
tail -f : 주기적으로 파일을 읽어서 반복 출력해줌
ex. tail -6 : 밑에서부터 6행 출력
파일 복사하기 : cp
디렉터리 복사하기 : cp -r
파일 이동하기 : mv
파일이름 변경
파일 이름 삭제 : rm
rm -r : 디렉터리 삭제

하위 디렉터리 및 파일을 삭제하려면 : rm -ri

ln : 하드링크 만들기 
(하드링크 = 복사랑 유사한 개념,
        복사는 inode 번호가 다르고 하드링크는 inode 번호가 같음)
ln -s : 심벌릭 링크 만들기
(심벌릭 링크 : 윈도우 바로가기랑 유사, 원본파일 삭제시 작동 안함)

touch : 빈 파일 생성
grep : 파일 내용 검색
grep -i : 대소문자 구분없이 검색
grep -n : 행번호 출력

find : 파일 찾기
find -exec {}\; : 파일 찾아서 명령 실행
find <파일명>-exec cat {}\; : 해당 파일명 찾아서 cat 명령 실행

---------------------------------------------------------

한글 파일 같은 텍스트 문서 편집
vi : 기본 텍스트 편집기
vim : 기본 텍스트 편집기 (라이트)
nano : vi에서 개선된 버전

* 텍스트 편집기 종류 : 모드형 / 비모드형
- 비모드형 : 한글, 워드
  > ctrl Alt 조합해서 특수 기능을 사용할 수 있는 편집기
- 모드형 : vi, vim
   입력모드 / 명령모드
   입력모드는 입력 기능
   명령모드는 특수 기능


vi aaa.txt
처음 들어가면 일반모드
i 키 누르면 입력모드 진입
--INSERT-- : 입력모드라는 의미
입력모드에서 일반모드로 전환 : esc키
일반모드에서 명령 모드로 전환 > : 키
:q  < 나가기 (수정되었을 경우에도 에러 발생)
:w  < 저장하기 

저장 안하고 :q 치면 에러  >> 저장하라는 에러 뜸
:q! < 강제로 나가기 (저장 안된 채로 나가기)

:wq < 저장하고 나가기
shift + zz : 저장하고 나가기 키

vi 파일 텍스트 수정도 되는데 해당 파일명이 없을 경우 생성도 함

touch 안쓰고 그냥 vi로 텍스트 파일 만들어도 됨

만약 vi 명령어로 들어간 뒤 파일명을 지정하지 않았다면
:w <파일명>

입력모드 진입방법 (esc키가 입력 나가는 키)
i < 현재 커서 앞에 입력 시작
a < 현재 커서 뒤에 입력 시작
o < 커서 다음 행에 입력 시작
I (대문자 i) < 커서 행 제일 앞에서 입력
A < 커서 행 제일 뒤에서 입력 시작
O < 커서 이전 행에 입력 시작

**** 리눅스가 예전 버전일 경우 방향키가 안먹힐때 사용
>> k < 위로 이동
     j < 밑으로 이동
     l < 오른쪽 이동
     h < 왼쪽 이동 

ctrl + u < 위로 페이지 이동
ctrl + d < 아래로 페이지 이동
ctrl + y < 한 행 위로 이동
ctrl + e < 한 행 아래로 이동

10G 또는 :10 < 10행으로 이동
(만일 에러 발생 시 어떤 행에서 발생했는지를 숫자로 출력하는 경우가 있는데,
그럴 때 디버깅을 위해서 해당 행으로 바로 이동하기)

:$ < 마지막 행으로 이동
일반모드 r : 해당 커서 부분만 수정
일반모드 cc : 해당 행 내용 삭제

vi vi-study.txt 파일 만들기

ubuntu editior vi
I live linux ubuntu linux
Hello, World!
Lorem ipsum dolor sit amet,
consectetur adipiscing elit.

yy < 해당 행 복사
p < 붙여넣기
3yy < 해당 행부터 밑에 3행 복사
dd < 잘라내기
P < 위로 붙여넣기

검색하기 >> /<문자열>
/<문자열> >> 아래 방향으로 검색
?<문자열> >> 위 방향으로 검색

:! ls <- vi 내부에서 명령어 실행
:sh <- 잠깐 빠져나오기 (파일 저장안하고 나오면 파일 없어짐)

nano nano-study.txt 파일 생성
ctrl + s 저장하기
ctrl + x 나가기

groups ubuntu
groups root
리눅스 사용자가 생성될 때
기본 전략을 그룹이 같은 이름으로 생성함

vi /etc/passwd
> 해당 파일은 현재 리눅스 시스템에 저장되어 있는 사용자 목록
root 사용자는 모든 권한을 가진 관리자 유저

<유저명>:<예전엔 비밀번호 들어가던>:<UID>:<GID>:x:999:999:<>:<로그인쉘>

chmod 777 a
chmod <0~7까지 숫자><파일명>

chmod u-x a

rwxrwxrwx

r = 4 w = 2 x = 1
7 : rwx
6 : rw-
5 : r-w

sudo passwd root
> 비밀번호 1234 입력 +확인

su : switch user 유저 변경
sudo : super user do 관리자로 실행
1234

su root

vi root-vi.txt 파일 생성
su ubuntu 생성

기타 사용자한테 쓰기 권한 주기
>> chmod o+w root-vi.txt

소유자 바꾸기
chown <소유자명><파일명>
chown ubuntu:ubuntu root-vi.txt

기타 사용자에게 모든 권한 뺏기
chmod o-rwx root-vi.txt
>> 나중에 실제 배포를 진행할 때,
   /var/html 폴더가 root 소유자에 권한이 rwxr-x---- 이라 되어잇고
   내가 사용중인 유저는 ubuntu,
   /var/html에 파일이 삽입이 안됨
(소유자 권한이 없는 파일에는 권한이 없기 때문에 삽입이 안됨)

chmod o-rwx test4
su root
sudo chown root:root test4

vi ./test4/vi-test.txt
Permission denied << 진짜 중요
권한없음!! << 진짜 중요

명령어도 권한 있음
내 사용자가 ubuntu인 상황에서
sudo chmod ubuntu:ubuntu test4 가 안되는게 정상

sudo는 sudo 권한주는 파일에서 권한을 줘야 실행 가능
다만, root는 sudo 항상 가능
sudo << 관리자 권한으로 실행 명령

---------------------------------
쉘 (shell)
- 명령어 해석기 기능
- 프로그래밍 기능
- 사용자 환경설정 기능

* 쉘 프롬프트 (명령어 해석기 기능)
- 한줄 명령어 해석
- 로그인 쉘이 여기에 해당

* 쉘 스크립트 (프로그래밍에 속함)
- 여러줄 명령어 해석
- 파일로 만들어서 여러 명령어를 한번에 실행

* 쉘 종류
> 본 쉘, C 쉘, 콘 쉘, 배시 쉘, 대시 쉘 등
> 리눅스 환경에서 주로 사용할 쉘은 배시 쉘 (bash shell)

echo <- 배시 쉘의 출력 명령
printf <- 출력 명령
printf "%d\n" 100
>> 알아서 %d에 들어감

printf "%d + %d = %d\n" 10 10 20 >> test1.txt

ls * <- 현재 디렉터리 파일과 서브 디렉터리 내에 있는 파일 모두 출력

cp * /tmp <- 현재 디렉터리 파일을 /tmp 디렉터리 안으로 복사

cp *.txt <- .txt가 붙은 모든 파일을 /tmp 디렉터리 안으로 복사

cat *.txt <- .txt 안의 모든 내용이 다 나옴


ls test?.txt 
ls test[13].txt
ls test[1-2].txt

영문자로 시작하고 .txt파일로 끝나는 모든 파일 목록 출력하기
>> ls [a-zA-z]*.txt

echo `date`

echo 명령어로 해당 문자열 출력
Today is Mon 13 Nov 2023 어쩌구
>> echo Today is `date`

>와 >>의 차이 : 덮어쓰기 유무
>  : 덮어쓰기 o
>> : 덮어쓰기 x , 내용 뒤에 붙여넣기 (append)

ls > test.txt : 해당 명령어를 실행하고 결과물 출력시 로그 파일로 저장할 때 사용됨

1. 서버 실행 준비 >> server.log
2. 서버 구동 준비 완료 >> server.log
3. 서버 구동 >> server.log
4. 서버 종료 >> server.log


1>server.log 2> error.log
> server.log
ㄴ 1>: 표준입출력 (성공한 로그만 남김)
ㄴ 2>: 에러 입출력(실패한 로그만 남김)
ㄴ > : 둘다 남김


echo Today is `date` > /dev/null
-> 아무것도 안뜸

/dev/null은 휴지통!
-> 주사용처는 해당 로그가 필요 없을 때 사용됨

권한 바꾸기 chmod
사용자는 모든 권한
그룹은 쓰기 권한 제외
그외 사용자는 읽기만 가능

<숫자>
chmod75 <파일명>
<문자>
chmodu+rwx
chmod g-w
chmod o-w

현재 사용자 변경
su root <- 관리자 사용자로 변경

sudo <- 관리자 권한으로 실행

chown<- 파일 소유자 및 그룹 변경

chown <소유자>:<그룹> <파일명>

echo <- 그냥 출력
ls * <- 해당 디렉터리 파일 및 하위 디렉터리 파일도 출력

cp * /usr <- 현재 디렉터리에 있는 파일들을 /usr 티렉터리로 복사 붙여넣기

cp [a-z]*.txt /usr <- 소문자알파벳으로 시작하는 확장자가 .txt인 파일들을 /usr 디렉터리로 복사 붙여넣기

cp [abcdf]*.txt /usr -> a,b,c,d,f로 시작하고 .txt로 끝나는 파일들을 /usr 디렉터리로 복사 붙여넣기
ex. cp ddyrtr.txt aaa.txt /usr

cp [a-z]*[0-9]
-> 알파벳으로 시작하고 숫자로 끝나는 파일

? 프로젝트 파일 빌드할 경우
ubuntu-0.0.1.jar 
ubuntu-0.0.1.jar 파일을 /home 붙여넣고 싶을때 (버전이 0.0.1이 아닐 수 있음)
-> cp ubuntu*.jar /home


`` -> 명령어로 해석해서 실행
ex. echo `date

★★★★★알아두면 좋음★★★★★★ 
> : 덮어쓰기

>> :  밑에 붙여넣기(append)

1> 표준 출력

2> 에러 출력